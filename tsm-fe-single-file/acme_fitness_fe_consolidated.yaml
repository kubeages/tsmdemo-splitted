---
apiVersion: v1
kind: Service
metadata:
  name: shopping
  labels:
    app: shopping
    service: shopping
spec:
  ports:
    - name: http-shopping
      protocol: TCP
      port: 3000
  selector:
    app: shopping
    service: shopping
---
apiVersion: apps/v1 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: shopping
  labels:
    app: shopping
    service: shopping
spec:
  selector:
    matchLabels:
      app: shopping
      service: shopping
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app: shopping
        service: shopping
    spec:
      containers:
      - image: registry.cloud-garage.net/ages/acmeshop-front-end:sa
        name: shopping
        env:
        - name: FRONTEND_PORT
          value: '3000'
        - name: USERS_HOST
          value: 'users.acmegns.tanzu'
        - name: CATALOG_HOST
          value: 'catalog.acmegns.tanzu'
        - name: ORDER_HOST
          value: 'order.acmegns.tanzu'
        - name: CART_HOST
          value: 'cart.acmegns.tanzu'
        - name: USERS_PORT
          value: '8081'
        - name: CATALOG_PORT
          value: '8082'
        - name: CART_PORT
          value: '5000'
        - name: ORDER_PORT
          value: '6000'
        ports:
        - containerPort: 3000
          name: http-shopping
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: acme-gateway
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: acme
spec:
  hosts:
  - "*"
  gateways:
  - acme-gateway
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: shopping
        port:
          number: 3000 
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-pass
type: Opaque
data:
  password: cGFzc3dvcmQ=
---
apiVersion: v1
kind: Secret
metadata:
  name: catalog-mongo-pass
type: Opaque
data:
  password: cGFzc3dvcmQ=
---
apiVersion: v1
kind: Secret
metadata:
  name: order-mongo-pass
type: Opaque
data:
  password: cGFzc3dvcmQ=
---
apiVersion: v1
kind: Secret
metadata:
  name: users-mongo-pass
type: Opaque
data:
  password: cGFzc3dvcmQ=
---
apiVersion: v1
kind: Service
metadata:
  name: loadgen
  labels:
    app: loadgenerator
    service: loadgen
spec:
  type: ClusterIP
  ports:
    - name: loadgen
      protocol: TCP
      port: 80
      targetPort: 8089
  selector:
    app: loadgenerator
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loadgenerator
spec:
  selector:
    matchLabels:
      app: loadgenerator
  replicas: 1
  template:
    metadata:
      labels:
        app: loadgenerator
    spec:
      terminationGracePeriodSeconds: 5
      restartPolicy: Always
      initContainers:
      - name: wait-frontend
        image: registry.cloud-garage.net/ages/alpine:3.7
        command: ['sh', '-c', 'echo -e "http://nl.alpinelinux.org/alpine/v3.5/main\nhttp://nl.alpinelinux.org/alpine/v3.5/community" > /etc/apk/repositories' , 'set -x;  apk update ; apk add curl && 
          until timeout -t 2 curl -f "http://${FRONTEND_ADDR}"; do 
            echo "waiting for http://${FRONTEND_ADDR}"; 
            sleep 2;
          done;']
        env:
        - name: FRONTEND_ADDR
          value: "shopping:3000"
      containers:
      - name: main
        image: registry.cloud-garage.net/ages/acme-load-gen:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8089
        env:
        - name: FRONTEND_ADDR
          value: "shopping:3000"
        resources:
          requests:
            cpu: 300m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
